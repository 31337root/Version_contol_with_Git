*** Git Object Types ***

At the heart of Git's repository impementation is the object store. It contains
your original data files and all the log messages, author information, dates,
and other information required to rebuild any version or branch of the project.

Git places only four types of objects in the ibject store: the blobs, trees, 
commits and tags. These four atomic objects form the fundation of Git's higher 
level data structures.

	Blobs
		Each version of a file is represented as a blob. Blob, a
		contraction of "binary large object," is a term that's
		commonly used in computing to refer to some variable or file
		that can contain any data and whose internal dstructure is
		is ignored by the program. A blob is treated as being opaque.
		A blob holds a file's data but does not contain any metadata
		aboud the file or even its name.
	Trees
		A tree object represents one level of directory information.
		It records blob identifiers, path names, and a bit of metadata
		for all the files ijn one directory. It can also recursively
		reference other (sub)tree objects and this build a complete
		hierarchy of files and subdirectories.
	Commits
		A commit object holds metadata for each change introduced into
		the repository, including the author, commiter, commit date, and
		log message. Each commit points to a tree object that captures,
		in one complete snapshot, the state of the repository at the 
		time the commit was perfomed. The initial commit, or root commit
		, has no parent.
	Tags
		A tag object assings an arbitrary yet presumable human readable
		name to a specific object, usually a commit.

Over time, all the information in the object store changes and grows, tracking 
and modeling your project edits, additions, and deleitions. To use disk space
and network bandwidht efficiently, Git compress and stores the objects in pack
files, which are also placed in the object store.
